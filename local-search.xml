<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1.1.1.1</title>
    <link href="/2023/04/25/1.1.1.1/"/>
    <url>/2023/04/25/1.1.1.1/</url>
    
    <content type="html"><![CDATA[<p>最近1.1.1.1复活了，速度还挺快，希望能一直这么稳定。</p><p>不过白嫖来说已经可以了，当作备用梯子还是可以的。</p><p>目前支持所有平台。tg申请后有23837126 GB，随便用。</p><p>网址：<a href="https://1.1.1.1/">https://1.1.1.1/</a></p><h6 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h6><p>1 、添加 Telegram 机器人 @generatewarpplusbot，按照指示发送指令，回答数字问题，获取 Key ，复制<br>2 、下载 CLOUDFLARE WARP ，账号设置里粘贴获得的 key</p>]]></content>
    
    
    <categories>
      
      <category>科学上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git基础命令</title>
    <link href="/2023/04/25/git-commands/"/>
    <url>/2023/04/25/git-commands/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-命令详解"><a href="#Git-命令详解" class="headerlink" title="Git 命令详解"></a>Git 命令详解</h1><h1 id="1-示意图"><a href="#1-示意图" class="headerlink" title="1. 示意图"></a>1. 示意图</h1><p><img src="https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578830/article/git/git-arch.png" alt="这里写图片描述"></p><ul><li>Workspace：工作区</li><li>Index &#x2F; Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li></ul><h1 id="2-Git-命令分类"><a href="#2-Git-命令分类" class="headerlink" title="2. Git 命令分类"></a>2. Git 命令分类</h1><h2 id="2-1-新建代码库"><a href="#2-1-新建代码库" class="headerlink" title="2.1. 新建代码库"></a>2.1. 新建代码库</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 在当前目录新建一个Git代码库</span>$ git init<span class="hljs-comment"># 新建一个目录，将其初始化为Git代码库</span>$ git init [project-name]<span class="hljs-comment"># 下载一个项目和它的整个代码历史</span>$ git <span class="hljs-built_in">clone</span> [url]</code></pre></div><h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2. 配置"></a>2.2. 配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 显示当前的Git配置</span>$ git config --list<span class="hljs-comment"># 编辑Git配置文件</span>$ git config -e [--global]<span class="hljs-comment"># 设置提交代码时的用户信息</span>$ git config [--global] user.name <span class="hljs-string">&quot;[name]&quot;</span>$ git config [--global] user.email <span class="hljs-string">&quot;[email address]&quot;</span><span class="hljs-comment"># 生成ssh</span><span class="hljs-comment"># https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh</span>$ ssh-keygen -o$ ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span></code></pre></div><h2 id="2-3-增加-x2F-删除文件"><a href="#2-3-增加-x2F-删除文件" class="headerlink" title="2.3. 增加&#x2F;删除文件"></a>2.3. 增加&#x2F;删除文件</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 添加指定文件到暂存区</span>$ git add [file1] [file2] ...<span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span>$ git add [<span class="hljs-built_in">dir</span>]<span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span>$ git add .<span class="hljs-comment"># 添加每个变化前，都会要求确认</span><span class="hljs-comment"># 对于同一个文件的多处变化，可以实现分次提交</span>$ git add -p<span class="hljs-comment"># 删除工作区文件，并且将这次删除放入暂存区</span>$ git <span class="hljs-built_in">rm</span> [file1] [file2] ...<span class="hljs-comment"># 停止追踪指定文件，但该文件会保留在工作区</span>$ git <span class="hljs-built_in">rm</span> --cached [file]<span class="hljs-comment"># 改名文件，并且将这个改名放入暂存区</span>$ git <span class="hljs-built_in">mv</span> [file-original] [file-renamed]</code></pre></div><h2 id="2-4-代码提交"><a href="#2-4-代码提交" class="headerlink" title="2.4. 代码提交"></a>2.4. 代码提交</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 提交暂存区到仓库区</span>$ git commit -m [message]<span class="hljs-comment"># 提交暂存区的指定文件到仓库区</span>$ git commit [file1] [file2] ... -m [message]<span class="hljs-comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>$ git commit -a<span class="hljs-comment"># 提交时显示所有diff信息</span>$ git commit -v<span class="hljs-comment"># 使用一次新的commit，替代上一次提交</span><span class="hljs-comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ git commit --amend -m [message]<span class="hljs-comment"># 重做上一次commit，并包括指定文件的新变化</span>$ git commit --amend [file1] [file2] ...</code></pre></div><h2 id="2-5-分支"><a href="#2-5-分支" class="headerlink" title="2.5. 分支"></a>2.5. 分支</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span>$ git branch<span class="hljs-comment"># 列出所有远程分支</span>$ git branch -r<span class="hljs-comment"># 列出所有本地分支和远程分支</span>$ git branch -a<span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span>$ git branch [branch-name]<span class="hljs-comment"># 新建一个分支，并切换到该分支</span>$ git checkout -b [branch]<span class="hljs-comment"># 新建一个分支，指向指定commit</span>$ git branch [branch] [commit]<span class="hljs-comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>$ git branch --track [branch] [remote-branch]<span class="hljs-comment"># 切换到指定分支，并更新工作区</span>$ git checkout [branch-name]<span class="hljs-comment"># 切换到上一个分支</span>$ git checkout -<span class="hljs-comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span>$ git branch --set-upstream [branch] [remote-branch]<span class="hljs-comment"># 合并指定分支到当前分支</span>$ git merge [branch]<span class="hljs-comment"># 选择一个commit，合并进当前分支</span>$ git cherry-pick [commit]<span class="hljs-comment"># 删除分支</span>$ git branch -d [branch-name]<span class="hljs-comment"># 删除远程分支</span>$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre></div><h2 id="2-6-标签"><a href="#2-6-标签" class="headerlink" title="2.6. 标签"></a>2.6. 标签</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有tag</span>$ git tag<span class="hljs-comment"># 新建一个tag在当前commit</span>$ git tag [tag]<span class="hljs-comment"># 新建一个tag在指定commit</span>$ git tag [tag] [commit]<span class="hljs-comment"># 删除本地tag</span>$ git tag -d [tag]<span class="hljs-comment"># 删除远程tag</span>$ git push origin :refs/tags/[tagName]<span class="hljs-comment"># 查看tag信息</span>$ git show [tag]<span class="hljs-comment"># 提交指定tag</span>$ git push [remote] [tag]<span class="hljs-comment"># 提交所有tag</span>$ git push [remote] --tags<span class="hljs-comment"># 新建一个分支，指向某个tag</span>$ git checkout -b [branch] [tag]</code></pre></div><h2 id="2-7-查看信息"><a href="#2-7-查看信息" class="headerlink" title="2.7. 查看信息"></a>2.7. 查看信息</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 显示有变更的文件</span>$ git status<span class="hljs-comment"># 显示当前分支的版本历史</span>$ git <span class="hljs-built_in">log</span><span class="hljs-comment"># 显示commit历史，以及每次commit发生变更的文件</span>$ git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span><span class="hljs-comment"># 搜索提交历史，根据关键词</span>$ git <span class="hljs-built_in">log</span> -S [keyword]<span class="hljs-comment"># 显示某个commit之后的所有变动，每个commit占据一行</span>$ git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s<span class="hljs-comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span>$ git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature<span class="hljs-comment"># 显示某个文件的版本历史，包括文件改名</span>$ git <span class="hljs-built_in">log</span> --follow [file]$ git whatchanged [file]<span class="hljs-comment"># 显示指定文件相关的每一次diff</span>$ git <span class="hljs-built_in">log</span> -p [file]<span class="hljs-comment"># 显示过去5次提交</span>$ git <span class="hljs-built_in">log</span> -5 --pretty --oneline<span class="hljs-comment"># 显示所有提交过的用户，按提交次数排序</span>$ git shortlog -sn<span class="hljs-comment"># 显示指定文件是什么人在什么时间修改过</span>$ git blame [file]<span class="hljs-comment"># 显示暂存区和工作区的差异</span>$ git diff<span class="hljs-comment"># 显示暂存区和上一个commit的差异</span>$ git diff --cached [file]<span class="hljs-comment"># 显示工作区与当前分支最新commit之间的差异</span>$ git diff HEAD<span class="hljs-comment"># 显示两次提交之间的差异</span>$ git diff [first-branch]...[second-branch]<span class="hljs-comment"># 显示今天你写了多少行代码</span>$ git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span><span class="hljs-comment"># 显示某次提交的元数据和内容变化</span>$ git show [commit]<span class="hljs-comment"># 显示某次提交发生变化的文件</span>$ git show --name-only [commit]<span class="hljs-comment"># 显示某次提交时，某个文件的内容</span>$ git show [commit]:[filename]<span class="hljs-comment"># 显示当前分支的最近几次提交</span>$ git reflog</code></pre></div><h2 id="2-8-远程同步"><a href="#2-8-远程同步" class="headerlink" title="2.8. 远程同步"></a>2.8. 远程同步</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 下载远程仓库的所有变动</span>$ git fetch [remote]<span class="hljs-comment"># 显示所有远程仓库</span>$ git remote -v<span class="hljs-comment"># 显示某个远程仓库的信息</span>$ git remote show [remote]<span class="hljs-comment"># 增加一个新的远程仓库，并命名</span>$ git remote add [shortname] [url]<span class="hljs-comment"># 取回远程仓库的变化，并与本地分支合并</span>$ git pull [remote] [branch]<span class="hljs-comment"># 上传本地指定分支到远程仓库</span>$ git push [remote] [branch]<span class="hljs-comment"># 强行推送当前分支到远程仓库，即使有冲突</span>$ git push [remote] --force<span class="hljs-comment"># 推送所有分支到远程仓库</span>$ git push [remote] --all</code></pre></div><h2 id="2-9-撤销"><a href="#2-9-撤销" class="headerlink" title="2.9. 撤销"></a>2.9. 撤销</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span>$ git checkout [file]<span class="hljs-comment"># 恢复某个commit的指定文件到暂存区和工作区</span>$ git checkout [commit] [file]<span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span>$ git checkout .<span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span>$ git reset [file]<span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span>$ git reset --hard<span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ git reset [commit]<span class="hljs-comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ git reset --hard [commit]<span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span>$ git reset --keep [commit]<span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span><span class="hljs-comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ git revert [commit]<span class="hljs-comment"># 暂时将未提交的变化移除，稍后再移入</span>$ git stash$ git stash pop</code></pre></div><h2 id="2-10-其他"><a href="#2-10-其他" class="headerlink" title="2.10. 其他"></a>2.10. 其他</h2><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 生成一个可供发布的压缩包</span>$ git archive<span class="hljs-comment"># 设置换行符为LF</span>git config --global core.autocrlf <span class="hljs-literal">false</span><span class="hljs-comment">#拒绝提交包含混合换行符的文件</span>git config --global core.safecrlf <span class="hljs-literal">true</span></code></pre></div><h2 id="2-11-Git-commit规范"><a href="#2-11-Git-commit规范" class="headerlink" title="2.11. Git commit规范"></a>2.11. Git commit规范</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><div class="code-wrapper"><pre><code class="hljs bash">fix(ngRepeat): fix trackBy <span class="hljs-keyword">function</span> being invoked with incorrect scope</code></pre></div><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>主要的提交类型如下：</p><table><thead><tr><th>Type</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td><code>feat</code></td><td>提交新功能</td><td>常用</td></tr><tr><td><code>fix</code></td><td>修复bug</td><td>常用</td></tr><tr><td><code>docs</code></td><td>修改文档</td><td></td></tr><tr><td><code>style</code></td><td>修改格式，例如格式化代码，空格，拼写错误等</td><td></td></tr><tr><td><code>refactor</code></td><td>重构代码，没有添加新功能也没有修复bug</td><td></td></tr><tr><td><code>test</code></td><td>添加或修改测试用例</td><td></td></tr><tr><td><code>perf</code></td><td>代码性能调优</td><td></td></tr><tr><td><code>chore</code></td><td>修改构建工具、构建流程、更新依赖库、文档生成逻辑</td><td>例如vendor包</td></tr></tbody></table><h1 id="3-Git-命令思维导图"><a href="#3-Git-命令思维导图" class="headerlink" title="3. Git 命令思维导图"></a>3. Git 命令思维导图</h1><p><img src="https://res.cloudinary.com/dqxtn0ick/image/upload/v1510578830/article/git/git-map.png" alt="git-map"></p><p>参考文章：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MetaMask 浏览器插件无法启动解决法方案</title>
    <link href="/2023/02/22/metamask-solution/"/>
    <url>/2023/02/22/metamask-solution/</url>
    
    <content type="html"><![CDATA[<p>在没有备份过助记词&#x2F;私钥，同时重启插件&#x2F;电脑均无法解决的情况下，可在电脑本地全局搜索 nkbihfbeogaeaoehlefnkodbefgpgknn，这是 MM 扩展 id，如这个目录下：C:\Users[User]\AppData\Local\Google\Chrome\User Data\Default\Local Extension Settings\nkbihfbeogaeaoehlefnkodbefgpgknn 找到 ldb&#x2F;log 这些文件，在这些文件里找到如图目标内容。 后用 <a href="https://metamask.github.io/vault-decryptor/%E8%A7%A3%E5%BC%80%E8%BF%99%E6%AE%B5%E7%9B%AE%E6%A0%87%E5%86%85%E5%AE%B9%EF%BC%8CPassword">https://metamask.github.io/vault-decryptor/解开这段目标内容，Password</a> 就是目标 MetaMask 扩展的密码。 </p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;6vllhjdFt2RX/g6yxFN9CqSpKJlzzuXaRqeClxpEhZtPv3zLVib4Eq/sOpfcERJu01iuv37WT8w+kponTH+5IMH8DWSUr3FsmxcjQCJTJoc7E/iBx9fki1o9KaYtrWZcsMf3X1fGurR9lUIqtAKNZLOqDKY4POAszB+KerAGKVnzpJ6FhcahTgHzYkQeJ9Q+qzoO0VHxAqbeS1ZJhgmBtln92XV/MUXEPF1AcbJF76m10JQVo+sg1u4iOapxNep+R/K+HopMpoyB8Q6HluV23wyxbCXA6kEEuwJ91LLpRi7EFLoNhJK1/lTG5+CrXFZE/WYQ6+gFlzSlwqIKPr2cnbUwktsj2/rFJ5sgmnVRMzdx+JseQO8e8YZhveABkzexQ2kKr+auWYKZYThACPCPy8Z7yBXPL3jd6AVK1Ubc/xVVGY1n73dwIkOY6PO+/OcS++XQ/QwvCCDVSTshHxtumSqVNfxrTeI8RKwV3xPyh0BIuXY6xn+5Di58MLpREesEwd4nOXKn6Xw5SqNuEsUS7Sjh8RhD01krg0GSCQVnfWFhMTQH/Q/euCHo9OA5yuwG6iyBBAl9WwLcaypZuOibPc+MDkcHp9V+rwP0SSEF8dF2gQgP//jaPYZm6bm70SWwndzHE8g0HZhiy3kCnm1LP0YMpH5vLoD/Fb6OxXsKsOdUR9Jzl/xIJKJA1JqSkHHnDPELceaYJFX6vkbevstBg6CuY+FlfBqG2UtMCM19bLpaBQ134lZkAUUdHPsWRjgSWHWvqco8A1E9RjdMrMMzQrIMDaaP82UPNkXaU19E2Ij+I5jvr26PNMSL9qnGdmC6+kxkr/MBUpWtK2DUzU2ZGnVImqms3De0Is9ldLnbQmp8bOYwq+XT5aOYu7aSR10y5mKH6B2V4swBKqZIuGFHpGkGkXYQsoY1wQ+BNQbMX7pPXO5Wiq4N7smYYZ3a3PvmX6KelE3f8+1ulVg1r+1s0PmnFxFr+6tog2IDPdrJL8lfqpTtcDRXIaMsp+Tj24+y9OIZFktsTkqdAzaMfbtg==&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;iv&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;kleBujFi5T+123iZU5CVEw==&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;salt&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;WVsdQtIhPkDiJfN5ORg9Eubm5jqyKFm3J9oWNLRKc=&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>若 MM 的任意扩展页面可以打开，比如：chrome-extension:&#x2F;&#x2F;nkbihfbeogaeaoehlefnkodbefgpgknn&#x2F;home.html，则用下面的方式也有得到待解密的内容： </p><div class="code-wrapper"><pre><code class="hljs stylus">chrome<span class="hljs-selector-class">.storage</span><span class="hljs-selector-class">.local</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;data&#x27;</span>, result =&gt; &#123;      <span class="hljs-selector-tag">var</span> vault = result<span class="hljs-selector-class">.data</span><span class="hljs-selector-class">.KeyringController</span><span class="hljs-selector-class">.vault</span>      console<span class="hljs-selector-class">.log</span>(vault) &#125;)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>block chain</tag>
      
      <tag>钱包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>以太坊上海升级-取款</title>
    <link href="/2023/02/21/eth-shanghai-withdrawal/"/>
    <url>/2023/02/21/eth-shanghai-withdrawal/</url>
    
    <content type="html"><![CDATA[<h3 id="相关文献："><a href="#相关文献：" class="headerlink" title="相关文献："></a>相关文献：</h3><p><a href="https://zhejiang.launchpad.ethereum.org/en/withdrawals#excess-balance-withdrawals">https://zhejiang.launchpad.ethereum.org/en/withdrawals#excess-balance-withdrawals</a></p><p><a href="https://docs.prylabs.network/docs/wallet/withdraw-validator">https://docs.prylabs.network/docs/wallet/withdraw-validator</a></p><p><a href="https://ethereum.org/zh/staking/withdrawals/#checking-an-account-for-withdrawals">https://ethereum.org/zh/staking/withdrawals/#checking-an-account-for-withdrawals</a></p><h3 id="撤回验证节点质押的ETH有两种方式："><a href="#撤回验证节点质押的ETH有两种方式：" class="headerlink" title="撤回验证节点质押的ETH有两种方式："></a>撤回验证节点质押的ETH有两种方式：</h3><ol><li><strong>部分（收益）提取</strong>：此选项可让您提取您的收益（即超过 32ETH 的部分）并继续验证。</li><li><strong>全额提取</strong>：此选项可让您提取您的全部质押（32ETH）和收益，有效地清算您的验证节点并退出网络。</li></ol><blockquote><p> 无法提取特定数量的 ETH</p><p> 部分提取只能提取超过32ETH的部分，如果用户有slash，质押的ETH不足32，是无法提取的，但是可以全额提取。</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>全额提取时验证者必须先退出验证才可以提款</strong>：设置提款凭证或退出请求的顺序无所谓</li><li><strong>提取不是立即完成的</strong> :  全部或部分提款的处理速度为每个区块最多 16 个验证者。</li><li><strong>全额提取是不可逆的</strong></li><li><strong>部分提取不会退出您的验证器</strong></li><li><strong>提款地址的设置是不可更改的</strong></li><li><strong>slash或之前退出的验证者仍然可以提现</strong></li><li><strong>智能合约地址可作为提现地址但不能触发功能</strong></li></ul><h3 id="提款需要做什么？"><a href="#提款需要做什么？" class="headerlink" title="提款需要做什么？"></a>提款需要做什么？</h3><p><strong>如果生成质押文件deposit时填写了eth1的地址作为提款地址，用户不需要发起任何操作，等待网络升级后会自动把收益部分打入设置的eth1地址。就像爆块那样，共识层收益也会自动打到设置的地址里。</strong></p><p><strong>如果未设置eth1地址，那么eth网络会自动忽略你的验证节点，收益会存在您的验证节点账户。这种情况想要提款那就需要先设置eth1地址，之后会自动把收益部分打入设置的eth1地址，下面是操作步骤。</strong></p><h3 id="一、设置eth1地址为提款地址"><a href="#一、设置eth1地址为提款地址" class="headerlink" title="一、设置eth1地址为提款地址"></a>一、设置eth1地址为提款地址</h3><blockquote><p>设置过提款地址的话是无法更改的，下面的流程只适用未设置提款地址的验证者。</p><p>此过程不消耗gas fee</p></blockquote><h5 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h5><p>1、准备好助记词、提款地址和相关程序</p><p>2、离线生成bls_to_execution_changes-*.json签名文件</p><p>3、验证文件参数</p><p>4、在线将签名信息广播到ETH网络</p><p>5、查看是否设置成功</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li><strong>助记词</strong></li><li><strong>可以访问的信标节点</strong></li><li><strong><a href="https://github.com/ethereum/staking-deposit-cli/releases">安装 staking-deposit-cli 的稳定版本</a></strong></li><li><strong><a href="https://github.com/prysmaticlabs/prysm/releases">安装 prysmctl 的稳定版</a></strong></li></ul><h4 id="部分（收益）提取设置流程："><a href="#部分（收益）提取设置流程：" class="headerlink" title="部分（收益）提取设置流程："></a>部分（收益）提取设置流程：</h4><h4 id="1、签署请求设置您的以太坊取款地址（BLS-to-Execution-Change）"><a href="#1、签署请求设置您的以太坊取款地址（BLS-to-Execution-Change）" class="headerlink" title="1、签署请求设置您的以太坊取款地址（BLS to Execution Change）"></a>1、签署请求设置您的以太坊取款地址（<strong>BLS to Execution Change</strong>）</h4><div class="code-wrapper"><pre><code class="hljs verilog">python ./staking_deposit/deposit<span class="hljs-variable">.py</span> <span class="hljs-keyword">generate</span>-bls-to-execution-change</code></pre></div><h5 id="交互式过程"><a href="#交互式过程" class="headerlink" title="交互式过程:"></a>交互式过程:</h5><ol><li>选择你的助记语言。</li><li>执行此操作的<strong>网络。</strong></li><li>输入你的<strong>助记词</strong></li><li>将被要求提供您想要提取的取款密钥的索引。</li><li>系统会询问您想要操作的验证器的<strong>验证器</strong> <strong>索引。</strong></li><li>您将被要求提供您的<strong>提款凭证</strong></li><li>您将被要求提供您希望用于接收提取资金的以太坊地址。<strong>一旦上链，将无法更改</strong>。</li></ol><blockquote><p>此过程涉及到助记词建议离线进行！！！</p><p>验证器索引和提款凭证可以在<a href="http://beaconcha.in/">Beaconcha.in</a>上获取</p></blockquote><div class="code-wrapper"><pre><code class="hljs tp"><span class="hljs-comment">//操作示例</span><span class="hljs-comment">python ./staking_deposit/deposit.py generate-bls-to-execution-change</span><span class="hljs-comment">Please choose your language [&#x27;1. العربية&#x27;, &#x27;2. ελληνικά&#x27;, &#x27;3. English&#x27;, &#x27;4. Français&#x27;, &#x27;5. Bahasa melayu&#x27;, &#x27;6. Italiano&#x27;, &#x27;7. 日本語&#x27;, &#x27;8. 한국어&#x27;, &#x27;9. Português do Brasil&#x27;, &#x27;10. român&#x27;, &#x27;11. Türkçe&#x27;, &#x27;12. 简体中文&#x27;]:  [English]: english</span><span class="hljs-comment"></span><span class="hljs-comment">Please choose the (mainnet or testnet) network/chain name [&#x27;mainnet&#x27;, &#x27;goerli&#x27;, &#x27;sepolia&#x27;, &#x27;zhejiang&#x27;]:  [mainnet]: zhejiang</span><span class="hljs-comment"></span><span class="hljs-comment">Please enter your mnemonic separated by spaces (&quot; &quot;). Note: you only need to enter the first 4 letters of each word if you&#x27;d prefer.: </span><span class="hljs-comment">bike shoe attitude violin fun life punch enhance attend bright voyage wheel clutch taxi high health siren jealous tell female upon firm manual wage</span><span class="hljs-comment"></span><span class="hljs-comment">Please enter the index (key number) of the signing key you want to use with this mnemonic. [0]: 0</span><span class="hljs-comment"></span><span class="hljs-comment">Please enter a list of the validator indices of your validator(s). Split multiple items with whitespaces or commas.: 8</span><span class="hljs-comment"></span><span class="hljs-comment">Please enter a list of the old BLS withdrawal credentials of your validator(s). Split multiple items with whitespaces or commas.: 00a6bd30000296e9c9f5823b09e689ff0bc0b1bea1d256caab9a5f213a226b33</span><span class="hljs-comment"></span><span class="hljs-comment">Please enter the 20-byte execution address for the new withdrawal credentials. Note that you CANNOT change it once you have set it on chain.: 0x9B984D5a03980D8dc0a24506c968465424c81DbE</span><span class="hljs-comment"></span><span class="hljs-comment">**[Warning] you are setting an Eth1 address as your withdrawal address. Please ensure that you have control over this address.**</span><span class="hljs-comment"></span><span class="hljs-comment">Repeat your execution address for confirmation.: 0x9B984D5a03980D8dc0a24506c968465424c81DbE</span><span class="hljs-comment"></span><span class="hljs-comment">**[Warning] you are setting an Eth1 address as your withdrawal address. Please ensure that you have control over this address.**</span><span class="hljs-comment"></span><span class="hljs-comment">Success!</span><span class="hljs-comment">Your SignedBLSToExecutionChange JSON file can be found at: /home/me/Desktop/code/python/staking-deposit-cli/bls_to_execution_changes</span></code></pre></div><blockquote><p>此过程会生成一个<code>bls_to_execution_changes-*.json</code>文件</p></blockquote><h5 id="验证hash"><a href="#验证hash" class="headerlink" title="验证hash"></a>验证hash</h5><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//这个方法的结果是你的取款凭证，如果对得上证明参数是正确的</span>echo <span class="hljs-number">0</span>x<span class="hljs-constructor">$(<span class="hljs-params">echo</span> -<span class="hljs-params">n</span> &#x27;0xaf6b29b5c440170bc773b688119ff4b035466473096697dd7d3dce5e2bcdacf017d599b1dd23f5906dfb3e3c79207a45&#x27; | <span class="hljs-params">xxd</span> -<span class="hljs-params">r</span> -<span class="hljs-params">p</span> | <span class="hljs-params">sha256sum</span> | <span class="hljs-params">cut</span> -<span class="hljs-params">d</span> &#x27; &#x27; -<span class="hljs-params">f</span> 1)</span></code></pre></div><h4 id="2、将您签名的请求提交到以太坊网络"><a href="#2、将您签名的请求提交到以太坊网络" class="headerlink" title="2、将您签名的请求提交到以太坊网络"></a>2、将您签名的请求提交到以太坊网络</h4><p>此过程会使用到上一步生成的文件</p><div class="code-wrapper"><pre><code class="hljs awk">prysmctl validator withdraw --beacon-node-host=&lt;node-url&gt; --path=&lt;bls_to_execution_changes-*.json&gt; prysmctl validator withdraw --beacon-node-host=localhost:<span class="hljs-number">3500</span> --path=<span class="hljs-regexp">/home/u</span>buntu<span class="hljs-regexp">/prysmctl/</span>bls-change/bls_to_execution_change-<span class="hljs-number">1681812857</span>.json --confirm --accept-terms-of-useorcurl -X POST -H <span class="hljs-string">&#x27;Content-type: application/json&#x27;</span> -d @&lt;@FILENAME DESTINATION&gt; \http:<span class="hljs-regexp">//</span>&lt;BEACON_NODE_HTTP_API_URL&gt;<span class="hljs-regexp">/eth/</span>v1<span class="hljs-regexp">/beacon/</span>pool/bls_to_execution_changescurl -X POST -H <span class="hljs-string">&#x27;Content-type: application/json&#x27;</span> -d <span class="hljs-string">&#x27;@/home/ubuntu/withdraw-validator/staking_deposit-cli-d7b5304-linux-amd64/bls_to_execution_changes/bls_to_execution_change-1678889108.json&#x27;</span> \http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">3500</span><span class="hljs-regexp">/eth/</span>v1<span class="hljs-regexp">/beacon/</span>pool/bls_to_execution_changes./deposit --language=english generate-bls-to-execution-change \--chain=goerli \--mnemonic=<span class="hljs-string">&quot;razor ** skate punch poem *** pelican flat project popular ***** water ivory social beach **** photo random explain brown ahead tomato alien invest&quot;</span> \--bls_withdrawal_credentials_list=<span class="hljs-string">&quot;0x00d621567c26382b332c9acce27baca16f99dda01149b15057cad86ba5738e9c&quot;</span> \--validator_start_index=<span class="hljs-number">0</span> \--validator_indices=<span class="hljs-string">&quot;393623&quot;</span> \--execution_address=<span class="hljs-string">&quot;0x8Fba9B6F96f6faB0bE13A21CDc426D1531d126E7&quot;</span></code></pre></div><h4 id="3、确认提款地址是否设置成功"><a href="#3、确认提款地址是否设置成功" class="headerlink" title="3、确认提款地址是否设置成功"></a>3、确认提款地址是否设置成功</h4><p><a href="http://beaconcha.in/">像Beaconcha.in</a>就包含跟踪取款的功能，还可以用本地节点的rpc进行确认。</p><div class="code-wrapper"><pre><code class="hljs rust">curl -X <span class="hljs-symbol">&#x27;GET</span>&#x27; \  <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//YOUR_PRYSM_NODE_HOST:3500/eth/v1/beacon/states/head/validators/YOUR_VALIDATOR_INDEX&#x27; \  -H &#x27;accept: application/json&#x27;</span></code></pre></div><h4 id="二、全额提取设置流程："><a href="#二、全额提取设置流程：" class="headerlink" title="二、全额提取设置流程："></a>二、全额提取设置流程：</h4><p>全额提取流程与部分提取流程一样，区别是验证器已退出则全部取款。</p><h4 id="三、退出验证器："><a href="#三、退出验证器：" class="headerlink" title="三、退出验证器："></a>三、退出验证器：</h4><div class="code-wrapper"><pre><code class="hljs awk">prysmctl validator <span class="hljs-keyword">exit</span> --wallet-dir=&lt;path<span class="hljs-regexp">/to/</span>wallet&gt; --beacon-rpc-provider=&lt;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">4000</span>&gt;</code></pre></div><h5 id="退出验证需要的时间："><a href="#退出验证需要的时间：" class="headerlink" title="退出验证需要的时间："></a>退出验证需要的时间：</h5><p>想要退出验证需要验证者至少活跃256个epoch约27小时才可以提交申请，</p><p>退出验证需要排队，取决于当前排队的验证者数量。</p><p>每个epoch可以退出的验证者数量有当前网络活跃的验证者数量决定，目前每个epoch可以退出7个验证者，当验证者数量达到 524,288 时，将增加到8 个。</p><p>目前以太坊上有52w+节点，每天最多可以退 1800 个节点。假设有 10% 的节点要退，排队大概在 33天。</p><p>在验证者自愿进入退出状态的情况下，资金将在 256 个纪元（约 27 小时）后可提取。如果验证者被削减，这个延迟会延长到 4 周（2048 纪元*4 或 ~36 天）</p><h3 id="四、部分提取或全部提取（已退出验证）的支付时间"><a href="#四、部分提取或全部提取（已退出验证）的支付时间" class="headerlink" title="四、部分提取或全部提取（已退出验证）的支付时间"></a>四、部分提取或全部提取（已退出验证）的支付时间</h3><p>ETH会维护一个提款队列，所有符合条件的验证者都在里边，他会无限循环的处理每个验证者的部分提取或全部提取。一个区块最多可以处理 16 笔提款。按照这个速度，每天可以处理 115,200 个验证者提款（假设没有遗漏区块）。</p><p>扩展此计算，我们可以估算处理给定数量的提款所需的时间：</p><table><thead><tr><th align="center">取款数量</th><th align="center">完成时间</th></tr></thead><tbody><tr><td align="center">400,000</td><td align="center">3.5天</td></tr><tr><td align="center">500,000</td><td align="center">4.3天</td></tr><tr><td align="center">600,000</td><td align="center">5.2天</td></tr><tr><td align="center">700,000</td><td align="center">6.1天</td></tr><tr><td align="center">800,000</td><td align="center">7.0天</td></tr></tbody></table><blockquote><p> 假如有500,000验证者排队，每个账户大概每4.3天发放一次收益。</p></blockquote><blockquote><p> 随着网络上有更多验证者，速度会变慢。错过区块的增加可能会按比例减慢速度。</p></blockquote><h5 id="全部提取的时间-x3D-退出验证器的时间-支付时间"><a href="#全部提取的时间-x3D-退出验证器的时间-支付时间" class="headerlink" title="全部提取的时间&#x3D;退出验证器的时间+支付时间"></a>全部提取的时间&#x3D;退出验证器的时间+支付时间</h5><h4 id="其他工具ethdo：https-github-com-wealdtech-ethdo-blob-master-docs-changingwithdrawalcredentials-md"><a href="#其他工具ethdo：https-github-com-wealdtech-ethdo-blob-master-docs-changingwithdrawalcredentials-md" class="headerlink" title="其他工具ethdo：https://github.com/wealdtech/ethdo/blob/master/docs/changingwithdrawalcredentials.md"></a>其他工具ethdo：<a href="https://github.com/wealdtech/ethdo/blob/master/docs/changingwithdrawalcredentials.md">https://github.com/wealdtech/ethdo/blob/master/docs/changingwithdrawalcredentials.md</a></h4>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>以太坊</tag>
      
      <tag>区块链</tag>
      
      <tag>上海升级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/18/hello-world/"/>
    <url>/2023/01/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>以太坊节点搭建教程</title>
    <link href="/2022/11/25/eth-node/"/>
    <url>/2022/11/25/eth-node/</url>
    
    <content type="html"><![CDATA[<h1 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h1><h6 id="本文采用geth-prysm-mev-boost-web3signer-aws-Secrets-Manager-Grafana-amp-Prometheus架构搭建。"><a href="#本文采用geth-prysm-mev-boost-web3signer-aws-Secrets-Manager-Grafana-amp-Prometheus架构搭建。" class="headerlink" title="本文采用geth+prysm+mev-boost+web3signer+aws Secrets Manager+Grafana&amp;Prometheus架构搭建。"></a>本文采用geth+prysm+mev-boost+web3signer+aws Secrets Manager+Grafana&amp;Prometheus架构搭建。</h6><ul><li>geth：执行层节点。</li><li>prysm：共识层节点和validator。</li><li>mev-boost：使用mev构建区块。</li><li>web3signer：用来管理密钥远程签名。</li><li>aws Secrets Manager：存储密钥。</li><li>Grafana&amp;Prometheus：监控服务器及节点状态。</li></ul><h6 id="机器要求："><a href="#机器要求：" class="headerlink" title="机器要求："></a>机器要求：</h6><ul><li><strong>操作系统</strong>：64 位 Linux</li><li><strong>CPU</strong>：8核 @ 2.8+ GHz</li><li><strong>内存</strong>：32GB内存</li><li><strong>存储</strong>：2.5TB 可用空间的 SSD</li></ul><blockquote><p>本教程是在一台机器下构建的，实际使用根据情况拆分。</p></blockquote><h6 id="端口："><a href="#端口：" class="headerlink" title="端口："></a>端口：</h6><table><thead><tr><th>端口&#x2F;协议</th><th>防火墙规则</th><th>原因&#x2F;注意事项</th></tr></thead><tbody><tr><td><code>8545/TCP</code></td><td>阻止所有流量。</td><td>这是执行节点的查询 API 的 JSON-RPC 端口。您（和应用程序）可以使用此端口检查执行节点状态，查询执行层链数据，甚至提交交易。这个端口一般不应该暴露给外界。</td></tr><tr><td><code>3500/TCP</code></td><td>阻止所有流量。</td><td>这是信标节点查询 API 的 JSON-RPC 端口。您（和应用程序）可以使用此端口检查信标节点状态并查询共识层链数据。这个端口一般不应该暴露给外界。</td></tr><tr><td><code>8551/TCP</code></td><td>阻止所有流量。</td><td>您的信标节点使用此端口连接到执行节点的引擎 API 。只有当您的本地信标节点连接到远程执行节点时，才应允许通过此端口的入站和出站流量。</td></tr><tr><td><code>4000/TCP</code></td><td>阻止所有流量。</td><td>您的验证器使用此端口通过gRPC连接到您的信标节点。只有当您的本地验证器连接到远程信标节点时，才应允许通过此端口的入站和出站流量。</td></tr><tr><td><code>*/UDP+TCP</code></td><td>允许出站流量。</td><td>为了发现对等点，Prysm 的信标节点通过随机端口拨出。允许来自任何端口的出站 TCP&#x2F;UDP 流量将有助于 Prysm 找到对等点。</td></tr><tr><td><code>13000/TCP</code></td><td>允许入站和出站流量。</td><td>在我们发现对等点之后，我们通过这个端口拨叫它们为libp2p建立一个持续的连接，并且所有 gossip&#x2F;p2p 请求和响应都将通过该连接流动。</td></tr><tr><td><code>12000/UDP</code></td><td>允许入站和出站流量。</td><td>你的信标节点公开这个 UDP 端口，以便其他以太坊节点可以发现你的节点，请求链数据，并提供链数据。</td></tr><tr><td><code>30303/TCP+UDP</code></td><td>允许入站和出站流量。</td><td><code>30303/TCP</code>是您的执行节点的侦听器端口，<code>30303/UDP</code>而是它的发现端口。此规则允许您的执行节点连接到其他对等节点。请注意，某些客户端<code>30301</code>默认使用。</td></tr></tbody></table><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><h3 id="1-安装prysm"><a href="#1-安装prysm" class="headerlink" title="1.安装prysm"></a>1.安装prysm</h3><p>创建一个文件夹<code>ethereum</code>，然后在其中创建两个子文件夹：<code>consensus</code>和<code>execution</code>。</p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> consensus</span><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> prysm &amp;&amp; <span class="hljs-built_in">cd</span> prysm</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh &amp;&amp; <span class="hljs-built_in">chmod</span> +x prysm.sh</span></code></pre></div><h4 id="生成-JWT"><a href="#生成-JWT" class="headerlink" title="生成 JWT"></a>生成 JWT</h4><p>共识节点和执行节点之间的 HTTP 连接需要使用JWT 令牌进行身份验证。</p><div class="code-wrapper"><pre><code class="hljs verilog">$ ./prysm<span class="hljs-variable">.sh</span> beacon-chain <span class="hljs-keyword">generate</span>-auth-secret</code></pre></div><h3 id="2-安装geth"><a href="#2-安装geth" class="headerlink" title="2.安装geth"></a>2.安装geth</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> execution</span><span class="hljs-meta prompt_"># </span><span class="language-bash">在下载页面找到对应版本的geth，https://geth.ethereum.org/downloads</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://gethstore.blob.core.windows.net/builds/geth-linux-amd64-1.11.6-ea9e62ca.tar.gz</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar xvf geth-linux-amd64-1.11.6-ea9e62ca.tar.gz</span><span class="hljs-meta prompt_"># </span><span class="language-bash">运行geth，</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">geth --mainnet --http --http.api eth,net,engine,admin --authrpc.jwtsecret /path/to/jwt.hex</span></code></pre></div><blockquote><p>执行层需要同步区块，可能需要很长时间</p></blockquote><div class="code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-comment"># 执行层常用命令</span><span class="hljs-comment"># 查看当前区块高度</span>$ curl --<span class="hljs-keyword">location</span> <span class="hljs-title">--request</span> POST &#x27;localhost:<span class="hljs-number">8545</span>&#x27; --header &#x27;Content-<span class="hljs-keyword">Type</span>: application/json&#x27; --data-raw &#x27;&#123; <span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>, <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;eth_blockNumber&quot;</span>, <span class="hljs-string">&quot;params&quot;</span>:[], <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">83</span> &#125;&#x27;<span class="hljs-comment"># 查看是否同步完成</span>$ curl --<span class="hljs-keyword">location</span> <span class="hljs-title">--request</span> POST &#x27;localhost:<span class="hljs-number">8545</span>&#x27; --header &#x27;Content-<span class="hljs-keyword">Type</span>: application/json&#x27; --data-raw &#x27;&#123; <span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>, <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;eth_syncing&quot;</span>, <span class="hljs-string">&quot;params&quot;</span>:[], <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">83</span> &#125;&#x27;</code></pre></div><h3 id="3-运行信标链"><a href="#3-运行信标链" class="headerlink" title="3.运行信标链"></a>3.运行信标链</h3><div class="code-wrapper"><pre><code class="hljs routeros">$ cd prysm<span class="hljs-comment"># --suggested-fee-recipient 用来接收执行层收益，要替换成你自己的以太坊地址</span>$ prysm.sh beacon-chain <span class="hljs-attribute">--execution-endpoint</span>=http://localhost:8551 <span class="hljs-attribute">--jwt-secret</span>=path/to/jwt.hex <span class="hljs-attribute">--suggested-fee-recipient</span>=0x01234567722E6b0000012BFEBf6177F1D2e9758D9</code></pre></div><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 共识层常用命令</span><span class="hljs-comment"># 共识层同步状态</span>curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">3500</span><span class="hljs-regexp">/eth/</span>v1<span class="hljs-regexp">/node/</span>syncing<span class="hljs-comment"># 共识层健康状态</span>curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span>/healthz<span class="hljs-comment"># 共识层连接状态</span>curl http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">3500</span><span class="hljs-regexp">/eth/</span>v1alpha1<span class="hljs-regexp">/node/</span>eth1/connections</code></pre></div><h3 id="4-运行验证器"><a href="#4-运行验证器" class="headerlink" title="4.运行验证器"></a>4.运行验证器</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># --validators-external-signer-url --validators-external-signer-public-keys用来配置web3signer</span>$ prysm.sh validator --validators-external-signer-url=http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9000</span> --validators-external-signer-public-keys=http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">9000</span><span class="hljs-regexp">/api/</span>v1<span class="hljs-regexp">/eth2/</span>publicKeys --web --beacon-rpc-provider=localhost:<span class="hljs-number">4000</span></code></pre></div><h3 id="5-安装mev-boost"><a href="#5-安装mev-boost" class="headerlink" title="5.安装mev-boost"></a>5.安装mev-boost</h3><div class="code-wrapper"><pre><code class="hljs shell">安装 mev-boost<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ~</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://github.com/flashbots/mev-boost/releases/download/v1.4.0/mev-boost_1.4.0_linux_amd64.tar.gz</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">提取存档。全局安装 mev-boost 并删除下载残留物。</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar xvf mev-boost_1.4.0_linux_amd64.tar.gz</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个 systemd 服务文件来存储服务配置，该文件告诉 systemd 以 mevboost 用户身份运行 mev-boost。</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo nano /etc/systemd/system/mevboost.service</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">将以下内容粘贴到文件中以在主网上运行 mev-boost。您必须用一个或多个现有继电器替换https://example.com此配置。我们有一份您可以探  <span class="hljs-comment"># 索的继电器列表。完成后退出并保存（Ctrl+ X、、、Y）Enter。</span></span>[Unit]Description=mev-boost (Mainnet)Wants=network-online.targetAfter=network-online.target[Service]Type=simpleUser=mevboostGroup=mevboostRestart=alwaysRestartSec=5ExecStart=mev-boost \    -mainnet \    -relay-check \    -relays https://example.com[Install]WantedBy=multi-user.target<span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">您可以将多个以逗号分隔的中继添加到-relays标志中，如下所示：-relays https://relay1,https://relay2。</span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"></span><span class="hljs-meta prompt_"># </span><span class="language-bash">然后使用以下命令启动服务并检查状态以确保其正常运行。</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl daemon-reload</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl start mevboost</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl status mevboost</span></code></pre></div><blockquote><p>启动mev-boost后在共识层节点增加–http-mev-relay&#x3D;<a href="http://localhost:18550，在验证器节点增加--enable-builder">http://localhost:18550，在验证器节点增加--enable-builder</a> –suggested-fee-recipient&#x3D;<address>。</p></blockquote><h3 id="6-安装web3signer"><a href="#6-安装web3signer" class="headerlink" title="6.安装web3signer"></a>6.安装web3signer</h3><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">需要提前准备aws密钥。</span><span class="hljs-meta prompt_"># </span><span class="language-bash">下载web3signer</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://artifacts.consensys.net/public/web3signer/raw/names/web3signer.tar.gz/versions/23.3.1/web3signer-23.3.1.tar.gz</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf web3signer-23.3.1.tar.gz</span><span class="hljs-meta prompt_"># </span><span class="language-bash">启动web3signer</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">bin/web3signer --http-host-allowlist=* eth2 --aws-secrets-enabled=<span class="hljs-literal">true</span> --aws-secrets-access-key-id=AKI******Q2 --aws-secrets-secret-access-key=Ad*************WiI --aws-secrets-region=ap-southeast-1 --key-manager-api-enabled=<span class="hljs-literal">true</span> --slashing-protection-enabled=<span class="hljs-literal">false</span></span></code></pre></div><blockquote><p> 运行成功后需要在验证器客户端配置–validators-external-signer-url –validators-external-signer-public-keys。</p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">常用命令</span><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载密钥</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -X POST http://localhost:9000/reload</span><span class="hljs-meta prompt_"># </span><span class="language-bash">key列表</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -X GET http://localhost:9000/eth/v1/keystores</span><span class="hljs-meta prompt_"># </span><span class="language-bash">添加key</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -X POST http://127.0.0.1:9000/eth/v1/keystores --header <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> --data <span class="hljs-string">&#x27;&lt;keystore&gt;&#x27;</span></span><span class="hljs-meta prompt_"># </span><span class="language-bash">删除key</span><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -X DELETE -d <span class="hljs-string">&#x27;&#123;&quot;pubkeys&quot;:[&quot;0xb66af903a56c792253f55a247d2d5e428c6735fe2aaff53cc54dd5a9ddc70dfe790565361744459546f3c0c6995e8dce&quot;]&#125;&#x27;</span>  http://127.0.0.1:9000/eth/v1/keystores</span></code></pre></div><h3 id="7-安装prometheus"><a href="#7-安装prometheus" class="headerlink" title="7.安装prometheus"></a>7.安装prometheus</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">sudo</span> <span class="hljs-string">wget</span> <span class="hljs-string">https://github.com/prometheus/prometheus/releases/download/v2.39.1/prometheus-2.39.1.linux-amd64.tar.gz</span><span class="hljs-string">$</span> <span class="hljs-string">tar</span> <span class="hljs-string">prometheus-2.39.1.linux-amd64.tar.gz</span><span class="hljs-comment"># 找到prometheus.yml文件并替换为以下内容：</span><span class="hljs-attr">global:</span>  <span class="hljs-attr">scrape_interval:</span>     <span class="hljs-string">15s</span> <span class="hljs-comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">15s</span> <span class="hljs-comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>  <span class="hljs-comment"># scrape_timeout is set to the global default (10s).</span><span class="hljs-comment"># Alertmanager configuration</span><span class="hljs-attr">alerting:</span>  <span class="hljs-attr">alertmanagers:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">static_configs:</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span>      <span class="hljs-comment"># - alertmanager:9093</span><span class="hljs-comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><span class="hljs-attr">rule_files:</span>  <span class="hljs-comment"># - &quot;first_rules.yml&quot;</span>  <span class="hljs-comment"># - &quot;second_rules.yml&quot;</span><span class="hljs-comment"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="hljs-comment"># Here it&#x27;s Prometheus itself.</span><span class="hljs-attr">scrape_configs:</span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;validator&#x27;</span>    <span class="hljs-attr">static_configs:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:8081&#x27;</span>]  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;beacon node&#x27;</span>    <span class="hljs-attr">static_configs:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:8080&#x27;</span>]  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&#x27;slasher&#x27;</span>    <span class="hljs-attr">static_configs:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&#x27;localhost:8082&#x27;</span>]      <span class="hljs-comment"># 运行prometheus</span><span class="hljs-string">$</span> <span class="hljs-string">./prometheus</span> <span class="hljs-string">--web.listen-address=0.0.0.0:9095</span></code></pre></div><blockquote><p>prometheus后台：<a href="http://localhost:9090/graph">http://localhost:9090/graph</a></p></blockquote><h3 id="8-安装grafana"><a href="#8-安装grafana" class="headerlink" title="8.安装grafana"></a>8.安装grafana</h3><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 下载grafana</span>https:<span class="hljs-regexp">//g</span>rafana.com<span class="hljs-regexp">/grafana/</span>download<span class="hljs-comment"># 运行grafana</span>sudo systemctl daemon-reloadsudo systemctl start grafana-serversudo systemctl status grafana-server<span class="hljs-comment"># 打开grafana后台http://localhost:3000，默认账户密码是admin。</span><span class="hljs-comment"># 添加上一步的数据源和仪表板就可以查看节点状态了</span><span class="hljs-comment"># 仪表板模版：https://docs.prylabs.network/assets/grafana-dashboards/small_amount_validators.json</span></code></pre></div><blockquote><p>本文所有的组件都可以添加到grafana，这里就不多说了。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此整套以太坊节点就搭建完成了，等待执行层和共识层同步完成，就可以尝试质押一个validator，然后把密钥导入aws运行了，然后可以在grafana仪表板查看各种状态。</p><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><p><a href="https://grafana.com/docs/">https://grafana.com/docs/</a></p><p><a href="https://prometheus.io/docs/">https://prometheus.io/docs/</a></p><p><a href="https://docs.prylabs.network/docs/">https://docs.prylabs.network/docs/</a></p><p><a href="https://docs.web3signer.consensys.net/">https://docs.web3signer.consensys.net/</a></p>]]></content>
    
    
    <categories>
      
      <category>ETH</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ETH</tag>
      
      <tag>以太坊</tag>
      
      <tag>节点搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
